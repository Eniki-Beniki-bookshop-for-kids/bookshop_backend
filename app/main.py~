import asyncio
import httpx

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from app.src.database.connect import session_manager
from app.src.database.db import db
from app.src.routes import books, comments, auth

app = FastAPI()

origins = [
    "http://localhost:3000",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


app.include_router(auth.router, prefix="/api")
app.include_router(books.router, prefix="/products")
app.include_router(comments.router, prefix="/comments")


async def check_database_health():
    async with httpx.AsyncClient() as client:  # –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π HTTP-–∫–ª—ñ—î–Ω—Ç
        while True:
            async with session_manager.session() as session:
                try:
                    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                    result = await session.execute(text("SELECT 1"))
                    if not result.fetchone():
                        print("‚ö†Ô∏è Database is not configured correctly!")
                    else:
                        print("‚úÖ Database is healthy!")
                except Exception as e:
                    print(f"‚ùå Database connection error: {e}")

            try:
                # Keep Alive: —Ä–æ–±–∏–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π GET-–∑–∞–ø–∏—Ç –¥–æ API
                url = "https://your-app.onrender.com/api/healthchecker"
                response = await client.get(url)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π HTTP-–∑–∞–ø–∏—Ç
                print(f"üîÑ Keep Alive Status: {response.status_code}")
            except Exception as e:
                print(f"‚ùå Keep Alive Failed: {e}")

            print("‚è≥ Sleeping for 300 seconds...")
            await asyncio.sleep(300)


@app.on_event("startup")
async def startup_event():
    asyncio.create_task(check_database_health())


@app.get("/")
async def root():
    return {"message": "Welcome to 'Eniki-Beniki' bookshop for kids."}


@app.head("/")
async def head_root():
    return {}


@app.get("/api/healthchecker")
async def healthchecker(session: AsyncSession = Depends(db)):
    try:
        result = await session.execute(text("SELECT 1"))
        result = result.fetchone()
        if not result:
            raise HTTPException(
                status_code=500, detail="Database is not configured correctly"
            )
        return {"message": "Welcome to 'Eniki-Beniki' bookshop for kids."}
    except Exception as e:
        print(e)
        raise HTTPException(status_code=500, detail="Error connecting to the database")
